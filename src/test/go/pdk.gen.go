// THIS FILE WAS GENERATED BY `xtp-go-bindgen`. DO NOT EDIT.
package main

import (
	
	

	pdk "github.com/extism/go-pdk"
)

//export apply
func _apply() int32 {
	var err error
	_ = err
            err = apply()
    		if err != nil {
			pdk.SetError(err)
			return -1
		}
  
  
	pdk.Log(pdk.LogDebug, "apply: returning")
  return 0
}

//export copyHeader
func _copyHeader() int32 {
	var err error
	_ = err
            err = copyHeader()
    		if err != nil {
			pdk.SetError(err)
			return -1
		}
  
  
	pdk.Log(pdk.LogDebug, "copyHeader: returning")
  return 0
}

//export headerToKey
func _headerToKey() int32 {
	var err error
	_ = err
            err = headerToKey()
    		if err != nil {
			pdk.SetError(err)
			return -1
		}
  
  
	pdk.Log(pdk.LogDebug, "headerToKey: returning")
  return 0
}

//export toUpper
func _toUpper() int32 {
	var err error
	_ = err
            err = toUpper()
    		if err != nil {
			pdk.SetError(err)
			return -1
		}
  
  
	pdk.Log(pdk.LogDebug, "toUpper: returning")
  return 0
}

//export transform
func _transform() int32 {
	var err error
	_ = err
            err = transform()
    		if err != nil {
			pdk.SetError(err)
			return -1
		}
  
  
	pdk.Log(pdk.LogDebug, "transform: returning")
  return 0
}

//export valueToKey
func _valueToKey() int32 {
	var err error
	_ = err
            err = valueToKey()
    		if err != nil {
			pdk.SetError(err)
			return -1
		}
  
  
	pdk.Log(pdk.LogDebug, "valueToKey: returning")
  return 0
}




	
		//go:wasmimport extism:host/user getHeader
		func _getHeader(uint64) uint64
	
		//go:wasmimport extism:host/user getKey
		func _getKey() uint64
	
		//go:wasmimport extism:host/user getRecord
		func _getRecord() uint64
	
		//go:wasmimport extism:host/user getTopic
		func _getTopic() uint64
	
		//go:wasmimport extism:host/user getValue
		func _getValue() uint64
	
		//go:wasmimport extism:host/user setHeader
		func _setHeader(uint64) 
	
		//go:wasmimport extism:host/user setKey
		func _setKey(uint64) 
	
		//go:wasmimport extism:host/user setRecord
		func _setRecord(uint64) 
	
		//go:wasmimport extism:host/user setTopic
		func _setTopic(uint64) 
	
		//go:wasmimport extism:host/user setValue
		func _setValue(uint64) 
	

	
	
	
		
	
	// A key/value header pair.
	type Header struct {
						Key string `json:"key"`
						Value []byte `json:"value"`
		
	}
		
	
		
	
	// A plain key/value record.
	type Record struct {
						Headers []Header `json:"headers"`
						Key []byte `json:"key"`
						Topic string `json:"topic"`
						Value []byte `json:"value"`
		
	}
		
	



		// GetHeader 
			func GetHeader(input string) ([]byte, error) {
		var err error
		_ = err
					mem := pdk.AllocateString(input)
		
		offs := _getHeader(mem.Offset())
		
						outputMem := pdk.FindMemory(offs)
			return outputMem.ReadBytes(), nil
			
	}

		// GetKey 
			func GetKey() (*string, error) {
		var err error
		_ = err
			offs := _getKey()
		
						outputMem := pdk.FindMemory(offs)
			out := string(outputMem.ReadBytes())
			return &out, err
			
	}

		// GetRecord 
			// And it returns an output Record (A plain key/value record.)
		func GetRecord() (*Record, error) {
		var err error
		_ = err
			offs := _getRecord()
		
						var output Record
			err = pdk.JSONFrom(offs, &output)
			if err != nil {
				return nil, err
			}
			return &output, nil
			
	}

		// GetTopic 
			func GetTopic() (*string, error) {
		var err error
		_ = err
			offs := _getTopic()
		
						outputMem := pdk.FindMemory(offs)
			out := string(outputMem.ReadBytes())
			return &out, err
			
	}

		// GetValue 
			func GetValue() ([]byte, error) {
		var err error
		_ = err
			offs := _getValue()
		
						outputMem := pdk.FindMemory(offs)
			return outputMem.ReadBytes(), nil
			
	}

		// SetHeader 
		// It takes input of Header (A key/value header pair.)
			func SetHeader(input Header) error {
		var err error
		_ = err
					mem, err := pdk.AllocateJSON(&input)
		if err != nil {
			return err
		}
		
		 _setHeader(mem.Offset())
		
	
		return nil
	
	}

		// SetKey 
			func SetKey(input string) error {
		var err error
		_ = err
					mem := pdk.AllocateString(input)
		
		 _setKey(mem.Offset())
		
	
		return nil
	
	}

		// SetRecord 
		// It takes input of Record (A plain key/value record.)
			func SetRecord(input Record) error {
		var err error
		_ = err
					mem, err := pdk.AllocateJSON(&input)
		if err != nil {
			return err
		}
		
		 _setRecord(mem.Offset())
		
	
		return nil
	
	}

		// SetTopic 
			func SetTopic(input string) error {
		var err error
		_ = err
					mem := pdk.AllocateString(input)
		
		 _setTopic(mem.Offset())
		
	
		return nil
	
	}

		// SetValue 
			func SetValue(input []byte) error {
		var err error
		_ = err
					mem := pdk.AllocateBytes(input)
		
		 _setValue(mem.Offset())
		
	
		return nil
	
	}


// Note: leave this in place, as the Go compiler will find the `export` function as the entrypoint.
func main() {}
